/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TravelBookingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bookTravel"
      | "createTravel"
      | "getTravel"
      | "getUserBookings"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "travelCount"
      | "travels"
      | "userBookings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingConfirmed"
      | "OwnershipTransferred"
      | "TravelCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bookTravel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTravel",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTravel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBookings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "travelCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "travels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBookings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bookTravel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTravel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTravel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "travelCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "travels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBookings",
    data: BytesLike
  ): Result;
}

export namespace BookingConfirmedEvent {
  export type InputTuple = [travelId: BigNumberish, traveler: AddressLike];
  export type OutputTuple = [travelId: bigint, traveler: string];
  export interface OutputObject {
    travelId: bigint;
    traveler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TravelCreatedEvent {
  export type InputTuple = [
    travelId: BigNumberish,
    name: string,
    price: BigNumberish
  ];
  export type OutputTuple = [travelId: bigint, name: string, price: bigint];
  export interface OutputObject {
    travelId: bigint;
    name: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TravelBooking extends BaseContract {
  connect(runner?: ContractRunner | null): TravelBooking;
  waitForDeployment(): Promise<this>;

  interface: TravelBookingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bookTravel: TypedContractMethod<[_travelId: BigNumberish], [void], "payable">;

  createTravel: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _maxParticipants: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getTravel: TypedContractMethod<
    [_travelId: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getUserBookings: TypedContractMethod<[], [bigint[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  travelCount: TypedContractMethod<[], [bigint], "view">;

  travels: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  userBookings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bookTravel"
  ): TypedContractMethod<[_travelId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createTravel"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _maxParticipants: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTravel"
  ): TypedContractMethod<
    [_travelId: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBookings"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "travelCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "travels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBookings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BookingConfirmed"
  ): TypedContractEvent<
    BookingConfirmedEvent.InputTuple,
    BookingConfirmedEvent.OutputTuple,
    BookingConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TravelCreated"
  ): TypedContractEvent<
    TravelCreatedEvent.InputTuple,
    TravelCreatedEvent.OutputTuple,
    TravelCreatedEvent.OutputObject
  >;

  filters: {
    "BookingConfirmed(uint256,address)": TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;
    BookingConfirmed: TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TravelCreated(uint256,string,uint256)": TypedContractEvent<
      TravelCreatedEvent.InputTuple,
      TravelCreatedEvent.OutputTuple,
      TravelCreatedEvent.OutputObject
    >;
    TravelCreated: TypedContractEvent<
      TravelCreatedEvent.InputTuple,
      TravelCreatedEvent.OutputTuple,
      TravelCreatedEvent.OutputObject
    >;
  };
}
